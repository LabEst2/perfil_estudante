5.88*30+
5.88*30
5.88*25
12.65*10
24.75*5
5.88*25+
12.65*10+
24.75*5
5.88*25+
12.65*10+
24.75*5
5.88*25+
12.65*10+
24.75*5
5.88*25+
12.65*10+
24.75*10
5.88*25+
12.65*10+
24.75*10
5.88*25+
12.65*10+
24.75*10+
19*10
5.88*25+
12.65*10+
24.75*10+
19*10
5.88*25+
12.65*10+
24.75*10
5.88*25+
12.65*10+
24.75*10
5.88*25+
12.65*10+
24.75*10
5.88*25+
12.65*10+
24.75*10
5.88*25+
12.65*10+
24.75*10
5.88*25+
12.65*10+
24.75*10
5.88*25+
12.65*10+
24.75*10
5.88*25+
12.65*10+
24.75*10+
20*10
5.88*25+
12.65*10+
24.75*10+
20*10
5.88*20+
12.65*10+
24.75*2+
20*5
5.88*20+
12.65*10+
24.75*8+
20*5
5.88*20+
12.65*10+
24.75*10+
20*5
5.88*20+
12.65*10+
24.75*10+
20*5
library(tidyverse)
library(ggplot2)
library(dvmisc)
#### SoluÃ§Ã£o para lista 3 #####
#### Letra A ######
f <- function(x1,x2){
f = x1^4+x2^4 + x1^2*x2 + x1*x2^2 - 20*x1^2 - 15*x2^2
return(f)
}
r = 5.5
nbins= 30
grid <-  expand_grid(
x1 = seq(-r,r,length.out = 10^2),
x2 = seq(-r,r,length.out = 10^2))
grid <- grid %>% mutate(z=f(x1,x2))
curva = ggplot(grid, aes(x=x1, y=x2, z=z))+
geom_contour_filled(bins = 30, show.legend = F)+
geom_contour(bins = 30)+
#scale_fill_brewer(palette = "BuPu")+
labs(x = 'x1', y = 'x2', colour= NULL)+
coord_cartesian(expand = F, xlim = c(-r,r), ylim =c(-r,r))
curva
grid %>% slice_min(z,n=1)
#### Letra B Ã© sÃ³ derivar ####
### Letra C #######
gradiente= function(x1,x2){
deriv_x1 = x1^3*4+ x1*x2*2 -40*x1 + x2^2
deriv_x2 = x2^3*4+ x1*x2*2 -30*x2 + x1^2
return(c(deriv_x1,deriv_x2))
}
gradiente_descendente <- function(lr, steps, theta_inicial){
dados = NULL
derivadas=NULL
theta = theta_inicial
dados = rbind(dados,theta)
for(k in seq_len(steps)){
derivada_theta = gradiente(theta[1], theta[2])
derivadas = rbind(derivadas, derivada_theta)
theta = theta - lr*derivada_theta
dados = rbind(dados, theta)
}
dados <- as.tibble(dados)
colnames(dados) <- c('x1','x2')
return(dados)
}
#### D ######
dados_gradiente = gradiente_descendente(0.01,100,theta_inicial = c(0,5))
curva+
geom_path(data = dados_gradiente,
inherit.aes = F, arrow = arrow(),
aes(x= x1,y=x2), colour ='red', size=0.75)
#### E ######
lrs <- set_names( c(1,0.1,0.01,0.001,0.0001))
dados_dif_lr <- map_dfr(lrs, .id='lr', gradiente_descendente, steps=100, theta_inicial = c(0,5))
dados_dif_lr$lr <- factor(dados_dif_lr$lr,
levels = names(lrs))
dados_dif_lr$lr %>% levels()
curva+
geom_path(data = dados_dif_lr,
inherit.aes = F,
arrow = arrow(),
aes(x=x1,y=x2,colour = lr),
size = 0.75)+
labs(colour = 'Taxa Aprendizado')
curva = ggplot(grid, aes(x=x1, y=x2, z=z))+
geom_contour_filled(bins = 30, show.legend = F)+
geom_contour(bins = 30)+
#scale_fill_brewer(palette = "BuPu")+
labs(x = 'x1', y = 'x2', colour= NULL)+
coord_cartesian(expand = F, xlim = c(-r,r), ylim =c(-r,r))
grid <-  expand_grid(
x1 = seq(-r,r,length.out = 10^2),
x2 = seq(-r,r,length.out = 10^2))
grid <- grid %>% mutate(z=f(x1,x2))
f <- function(x1,x2){
f = x1^4+x2^4 + x1^2*x2 + x1*x2^2 - 20*x1^2 - 15*x2^2
return(f)
}
r = 5.5
nbins= 30
grid <-  expand_grid(
x1 = seq(-r,r,length.out = 10^2),
x2 = seq(-r,r,length.out = 10^2))
View(grid)
grid <- as.tibble(grid)
grid <- grid %>% mutate(z=f(x1,x2))
curva = ggplot(grid, aes(x=x1, y=x2, z=z))+
geom_contour_filled(bins = 30, show.legend = F)+
geom_contour(bins = 30)+
#scale_fill_brewer(palette = "BuPu")+
labs(x = 'x1', y = 'x2', colour= NULL)+
coord_cartesian(expand = F, xlim = c(-r,r), ylim =c(-r,r))
curva
grid %>% slice_min(z,n=1)
grid %>% filter(z=min(z))
grid %>% filter(z=min(grid$z))
grid %>% filter(z==min(grid$z))
grid %>% filter(z==min(z))
gradiente= function(x1,x2){
deriv_x1 = x1^3*4+ x1*x2*2 -40*x1 + x2^2
deriv_x2 = x2^3*4+ x1*x2*2 -30*x2 + x1^2
return(c(deriv_x1,deriv_x2))
}
gradiente_descendente <- function(lr, steps, theta_inicial){
dados = NULL
derivadas=NULL
theta = theta_inicial
dados = rbind(dados,theta)
for(k in seq_len(steps)){
derivada_theta = gradiente(theta[1], theta[2])
derivadas = rbind(derivadas, derivada_theta)
theta = theta - lr*derivada_theta
dados = rbind(dados, theta)
}
dados <- as.tibble(dados)
colnames(dados) <- c('x1','x2')
return(dados)
}
#### D ######
dados_gradiente = gradiente_descendente(0.01,100,theta_inicial = c(0,5))
curva+
geom_path(data = dados_gradiente,
inherit.aes = F, arrow = arrow(),
aes(x= x1,y=x2), colour ='red', size=0.75)
#### E ######
lrs <- set_names( c(1,0.1,0.01,0.001,0.0001))
dados_dif_lr <- map_dfr(lrs, .id='lr', gradiente_descendente, steps=100, theta_inicial = c(0,5))
dados_dif_lr$lr <- factor(dados_dif_lr$lr,
levels = names(lrs))
dados_dif_lr$lr %>% levels()
curva+
geom_path(data = dados_dif_lr,
inherit.aes = F,
arrow = arrow(),
aes(x=x1,y=x2,colour = lr),
size = 0.75)+
labs(colour = 'Taxa Aprendizado')
(26.25-23.73)*10
25.2/237.33
(25.2+7.37)/237.33
(25.2+7.37-1.99)/237.33
26.25*10
(29.25-23.73+7.37-1.99)*10
((29.25-23.73+7.37-1.99)*10)/237.33
50/12
100/12
10^6
10^6/10^2
10^6/1
10^6/10
load(file = 'Estudantes.RDATA')
setwd("D:/Users/Public/Documents/Git/perfil_estudante")
load(file = 'Estudantes.RDATA')
### Carregando bibliotecas ####
library(pacman)
p_load(shiny,ggplot2,readxl,plotly,shinythemes,tidyverse,shinydashboard,sass,leaflet,tmap,shinyWidgets,sp)
#### Primeiro set o diretório do console para o lugar do arquivo,
### Vá em Session > Set Working ... > To source file location
`%notin%` <- Negate(`%in%`)
getwd()
#### Carregando arquivos #####
load(file = 'Estudantes.RDATA')
load(file = 'Estudantes_RA.RDATA')
load(file = 'mapars.RDATA')
load('new_groups.RDATA')
#### Carregando funções #####
source('Filtros_Laterais.R', encoding = 'UTF-8')
source('tabs.R', encoding = 'UTF-8')
#### Fazendo as escolhas #####
dbHeader <- dashboardHeader(title = tags$a(href='https://github.com/LabEst2/perfil_estudante',
"Perfil do Estudante"))
##### Página UI ######
ui <-  tags$html(
tags$head(
tags$style(sass(sass_file('www/styles.scss')))
),
dashboardPage(
skin = "green",
dbHeader,
dashboardSidebar(
sidebarMenu(
menuItem("Página Inicial", tabName = "analises", icon = icon("chart-line")),
menuItem("Análise Sócio Economica", tabName = "sobre", icon = icon("chart-pie")),
menuItem("Mapa", tabName = "mapas", icon = icon("globe-americas")))
),
dashboardBody(
tabItems(
tabItem(tabName = "analises", fluidRow(
filtros_lateral_inicial(),
box(class = 'floating-box',
tabsetPanel(inicial_ui(),
Instituto_ui(),
Curso_ui()),
width = 12
))
),
tabItem(tabName = 'sobre',fluidRow(
filtros_lateral_raca_cor(),
box(class='floating-box',
tabsetPanel(
Raca_cor_ui(),
Escolaridae_ui(),
Ensino_medio_ui(),
Ensino_fundamental_ui()
),width = 9))),
tabItem(tabName = 'mapas',fluidRow(
filtros_mapas(),
box(class='floating-box',
tabsetPanel(
mapa_ui()
),width = 9)))
)
)
)
)
server <- function(input,output){
##### Gráfico Inicial #####
index <- reactive({
Index = which(names(new_groups)==input$variable)
Index
})
df_inicial <- reactive({
Teste = Estudantes %>% group_by(semestre_ingresso,!!new_groups[[index()]]) %>% count()
})
output$inicial <-
renderPlotly({
df_inicial() %>% filter(!!new_groups[[index()]]%notin%c('Outro','Nao se aplica','Ignorado')) %>%
ggplot(aes(x=semestre_ingresso,y=n,group=!!new_groups[[index()]],colour=!!new_groups[[index()]]))+
geom_line(size=1.2)+
ggtitle(paste0('Acompanhamento da Variável ',input$variable))+
scale_linetype_manual(values = c('dotted', 'solid')) +
scale_colour_manual(name='Níveis',values=c('#A11D21','#003366','#CC9900','#406a53',
'#530202','#30075b','#055b06','#038c09',
'#05163b', '#b94c00', '#48042c')) +
theme_bw()+
labs(x='Semestres',y='Número de Alunos Ingressos')+
theme(legend.position = 'bottom',
plot.title = element_text(hjust=0.5),
axis.title.y=element_text(colour='black',size=10),
axis.title.x=element_text(colour='black',size=10),
axis.text=element_text(colour='black',size=6.5),
panel.border=element_blank(),
axis.line=element_line(colour='black'))
})
#### Gráfico de Instituo ######
df_instituto <- reactive({
grupo_instituto <- Estudantes %>% filter(!!new_groups[[index()]]%notin% c('Ignorado')) %>%
group_by(instituto, !!new_groups[[index()]]) %>%
count() %>%
filter(instituto!='Ignorado')%>%
group_by(instituto) %>%
mutate(freq_relat=n*100/sum(n)) %>%
mutate(freq_relat=round(freq_relat,digits = 3))
return(grupo_instituto)
})
output$Instituto_plot <- renderPlotly({
df_instituto() %>%
ggplot(aes(x=instituto, y=freq_relat, fill= !!new_groups[[index()]] ))+
geom_col() +
scale_fill_manual(name = 'Níveis',
values = c('#A11D21','#003366','#CC9900','#406a53',
'#530202','#30075b','#055b06','#038c09',
'#05163b', '#b94c00', '#48042c')) +
ggtitle(paste0('Distribuição da variável ',input$variable,' por instituo'))+
theme_bw()+
labs(x='Instituto',y='Frequência Relativa')+
theme(legend.position = 'top',
plot.title = element_text(hjust=0.5),
axis.title.y=element_text(colour='black',size=10),
axis.title.x=element_text(colour='black',size=10),
axis.text=element_text(colour='black',size=6.5),
panel.border=element_blank(),
axis.line=element_line(colour='black'))
})
##### Reactive para gráfico de Curso #####
df_curso <- reactive({
grupo_curso <- Estudantes %>% filter(instituto==input$instituto,!!new_groups[[index()]]%notin%c('Ignorado')) %>%
group_by(curso, !!new_groups[[index()]]) %>%
count() %>%
filter(curso!='Ignorado')%>%
group_by(curso) %>%
mutate(freq_relat=n*100/sum(n)) %>%
mutate(freq_relat=round(freq_relat,digits = 3))
return(grupo_curso)
})
output$Curso_plot <- renderPlotly({
df_curso() %>%
ggplot(aes(x=curso, y=freq_relat, fill= !!new_groups[[index()]] ))+
geom_col() +
coord_flip()+
scale_fill_manual(name = 'Níveis',
values = c('#A11D21','#003366','#CC9900','#406a53',
'#530202','#30075b','#055b06','#038c09',
'#05163b', '#b94c00', '#48042c')) +
ggtitle(paste0('Distribuição da variável ',input$variable,' por curso -',input$instituto))+
theme_bw()+
labs(x='',y='Frequência Relativa')+
theme(legend.position = 'top',
plot.title = element_text(hjust=0.5),
axis.title.y=element_text(colour='black',size=10),
axis.title.x=element_text(colour='black',size=10),
axis.text=element_text(colour='black',size=6.5),
panel.border=element_blank(),
axis.line=element_line(colour='black'))
})
#### reactive para o gráfico de pizza de raça cor ####
df_raca_cor <- reactive({
Rosca_cor <- Estudantes %>% filter(semestre_ingresso%in%input$semestre_ingresso,
renda_familiar%in%input$renda_familiar,
sistema_ingresso%in%input$cotas )
Rosca_cor <- Rosca_cor %>% group_by(cor_raca) %>% count()
Rosca_cor
})
output$raca_cor <- renderPlotly({
df_raca_cor() %>%
plot_ly(labels = ~cor_raca, values = ~n, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
marker = list(colors = c('#A11D21','#003366','#CC9900','#406a53',
'#530202','#30075b','#055b06','#038c09',
'#05163b', '#b94c00', '#48042c'),
line = list(color = '#FFFFFF', width = 1)))
})
### Escolaridade dos Pais ######
df_escolaridade_mae <- reactive({
escol_mae <- Estudantes %>% filter(semestre_ingresso%in%input$semestre_ingresso,
renda_familiar%in%input$renda_familiar,
sistema_ingresso%in%input$cotas,
escolaridade_mae%notin%c('Ignorado'))
escol_mae <- escol_mae %>% group_by(escolaridade_mae) %>% count()
escol_mae
})
output$escolaridade_mae <- renderPlotly({
df_escolaridade_mae() %>%
ggplot(aes(x=reorder(escolaridade_mae,-order(escolaridade_mae)), y=n))+
geom_col(fill ='#A11D21' ) +
coord_flip()+
ggtitle("Frequência Absoluta da Escolaridade da Mãe")+
theme_bw()+
labs(x='',y='')+
theme(legend.position = 'top',
plot.title = element_text(hjust=0.5),
axis.title.y=element_text(colour='black',size=10),
axis.title.x=element_text(colour='black',size=10),
axis.text=element_text(colour='black',size=6.5),
panel.border=element_blank(),
axis.line=element_line(colour='black'))
})
df_escolaridade_pai <- reactive({
escol_mae <- Estudantes %>% filter(semestre_ingresso%in%input$semestre_ingresso,
renda_familiar%in%input$renda_familiar,
sistema_ingresso%in%input$cotas,
escolaridade_pai%notin%c('Ignorado'))
escol_mae <- escol_mae %>% group_by(escolaridade_pai) %>% count()
escol_mae
})
output$escolaridade_pai <- renderPlotly({
df_escolaridade_pai() %>%
ggplot(aes(x=reorder(escolaridade_pai,-order(escolaridade_pai)), y=n))+
geom_col(fill ='#003366' ) +
coord_flip()+
ggtitle("Frequência Absoluta da Escolaridade do Pai")+
theme_bw()+
labs(x='',y='')+
theme(legend.position = 'top',
plot.title = element_text(hjust=0.5),
axis.title.y=element_text(colour='black',size=10),
axis.title.x=element_text(colour='black',size=10),
axis.text=element_text(colour='black',size=6.5),
panel.border=element_blank(),
axis.line=element_line(colour='black'))
})
#### Ensino Médio #####
df_em <- reactive({
escol_mae <- Estudantes %>% filter(semestre_ingresso%in%input$semestre_ingresso,
renda_familiar%in%input$renda_familiar,
sistema_ingresso%in%input$cotas,
ensino_medio%notin%c('Ignorado'))
escol_mae <- escol_mae %>% group_by(ensino_medio) %>% count()
escol_mae
})
output$ensino_medio <- renderPlotly({
df_em() %>%
ggplot(aes(x=reorder(ensino_medio,-order(ensino_medio)), y=n))+
geom_col(fill ='#406a53' ) +
coord_flip()+
ggtitle("Frequência Absoluta Escola Ensino Médio")+
theme_bw()+
labs(x='',y='')+
theme(legend.position = 'top',
plot.title = element_text(hjust=0.5),
axis.title.y=element_text(colour='black',size=10),
axis.title.x=element_text(colour='black',size=10),
axis.text=element_text(colour='black',size=6.5),
panel.border=element_blank(),
axis.line=element_line(colour='black'))
})
### Ensino Fundamental ######
df_ef <- reactive({
escol_mae <- Estudantes %>% filter(semestre_ingresso%in%input$semestre_ingresso,
renda_familiar%in%input$renda_familiar,
sistema_ingresso%in%input$cotas,
ensino_fundamental%notin%c('Ignorado'))
escol_mae <- escol_mae %>% group_by(ensino_fundamental) %>% count()
escol_mae
})
output$ensino_fundamental <- renderPlotly({
df_ef() %>%
ggplot(aes(x=reorder(ensino_fundamental,-order(ensino_fundamental)), y=n))+
geom_col(fill ='#406a53' ) +
coord_flip()+
ggtitle("Frequência Absoluta Escola Ensino Fundamental")+
theme_bw()+
labs(x='',y='')+
theme(legend.position = 'top',
plot.title = element_text(hjust=0.5),
axis.title.y=element_text(colour='black',size=10),
axis.title.x=element_text(colour='black',size=10),
axis.text=element_text(colour='black',size=6.5),
panel.border=element_blank(),
axis.line=element_line(colour='black'))
})
#### Reactive para os mapas #####
df_mapa <- reactive({
parte1 <- Estudantes_RA %>% filter(campus%in%input$campus_mapas,semestre_ingresso%in%input$semestre_mapas)
teste= parte1 %>% group_by(ra) %>% summarise(n = sum(n))
DFMAPA=merge(MAPARS,teste,by=c('ra') ,duplicateGeoms = TRUE)
DFMAPA$n[is.na(DFMAPA$n)] <- 0
DFMAPA
})
output$mapa1 <- renderLeaflet({
map1 <- df_mapa() %>% tm_shape(name='maps')+
tm_polygons(col = "n", palette = "Greens", title = "Número Ingressantes UNB por RA")
tmap_leaflet(map1,add.titles = F,
in.shiny=T)
})
}
shinyApp(ui = ui, server = server)
